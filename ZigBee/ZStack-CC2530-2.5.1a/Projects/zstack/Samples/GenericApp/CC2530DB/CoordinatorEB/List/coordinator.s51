///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        06/Oct/2022  21:28:29 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\Learning Materials\ÎïÁªÍø19-1ÎïÁªÍø×ÛºÏÏîÄ¿ÊµÑ /
//                          µ\SourceCode\ZigBee\ZStack-CC2530-2.5.1a\Projects /
//                          \zstack\Samples\GenericApp\Source\coordinator.c   /
//    Command line       =  -f "D:\Learning Materials\ÎïÁªÍø19-1ÎïÁªÍø×ÛºÏÏîÄ /
//                          ¿ÊµÑµ\SourceCode\ZigBee\ZStack-CC2530-2.5.1a\Proj /
//                          ects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ /
//                          Tools\CC2530DB\f8wCoord.cfg" (-DCPU32MHZ          /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TR /
//                          UE -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8     /
//                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)   /
//                          -f "D:\Learning Materials\ÎïÁªÍø19-1ÎïÁªÍø×ÛºÏÏîÄ /
//                          ¿ÊµÑµ\SourceCode\ZigBee\ZStack-CC2530-2.5.1a\Proj /
//                          ects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ /
//                          Tools\CC2530DB\f8wConfig.cfg" (-DZIGBEEPRO        /
//                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      /
//                          -DDEFAULT_CHANLIST=0x00001000                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFE                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "D:\Learning               /
//                          Materials\ÎïÁªÍø19-1ÎïÁªÍø×ÛºÏÏîÄ¿ÊµÑµ\SourceCode /
//                          \ZigBee\ZStack-CC2530-2.5.1a\Projects\zstack\Samp /
//                          les\GenericApp\Source\coordinator.c" -D ZTOOL_P1  /
//                          -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D       /
//                          LCD_SUPPORTED=DEBUG -lC "D:\Learning              /
//                          Materials\ÎïÁªÍø19-1ÎïÁªÍø×ÛºÏÏîÄ¿ÊµÑµ\SourceCode /
//                          \ZigBee\ZStack-CC2530-2.5.1a\Projects\zstack\Samp /
//                          les\GenericApp\CC2530DB\CoordinatorEB\List\" -lA  /
//                          "D:\Learning Materials\ÎïÁªÍø19-1ÎïÁªÍø×ÛºÏÏîÄ¿Êµ /
//                          Ñµ\SourceCode\ZigBee\ZStack-CC2530-2.5.1a\Project /
//                          s\zstack\Samples\GenericApp\CC2530DB\CoordinatorE /
//                          B\List\" --diag_suppress Pe001,Pa010 -o           /
//                          "D:\Learning Materials\ÎïÁªÍø19-1ÎïÁªÍø×ÛºÏÏîÄ¿Êµ /
//                          Ñµ\SourceCode\ZigBee\ZStack-CC2530-2.5.1a\Project /
//                          s\zstack\Samples\GenericApp\CC2530DB\CoordinatorE /
//                          B\Obj\" -e --no_code_motion --debug --core=plain  /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I "D:\Learning              /
//                          Materials\ÎïÁªÍø19-1ÎïÁªÍø×ÛºÏÏîÄ¿ÊµÑµ\SourceCode /
//                          \ZigBee\ZStack-CC2530-2.5.1a\Projects\zstack\Samp /
//                          les\GenericApp\CC2530DB\" -I "D:\Learning         /
//                          Materials\ÎïÁªÍø19-1ÎïÁªÍø×ÛºÏÏîÄ¿ÊµÑµ\SourceCode /
//                          \ZigBee\ZStack-CC2530-2.5.1a\Projects\zstack\Samp /
//                          les\GenericApp\CC2530DB\..\Source\" -I            /
//                          "D:\Learning Materials\ÎïÁªÍø19-1ÎïÁªÍø×ÛºÏÏîÄ¿Êµ /
//                          Ñµ\SourceCode\ZigBee\ZStack-CC2530-2.5.1a\Project /
//                          s\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMa /
//                          in\TI2530DB\" -I "D:\Learning                     /
//                          Materials\ÎïÁªÍø19-1ÎïÁªÍø×ÛºÏÏîÄ¿ÊµÑµ\SourceCode /
//                          \ZigBee\ZStack-CC2530-2.5.1a\Projects\zstack\Samp /
//                          les\GenericApp\CC2530DB\..\..\..\..\..\Components /
//                          \hal\include\" -I "D:\Learning                    /
//                          Materials\ÎïÁªÍø19-1ÎïÁªÍø×ÛºÏÏîÄ¿ÊµÑµ\SourceCode /
//                          \ZigBee\ZStack-CC2530-2.5.1a\Projects\zstack\Samp /
//                          les\GenericApp\CC2530DB\..\..\..\..\..\Components /
//                          \hal\target\CC2530EB\" -I "D:\Learning            /
//                          Materials\ÎïÁªÍø19-1ÎïÁªÍø×ÛºÏÏîÄ¿ÊµÑµ\SourceCode /
//                          \ZigBee\ZStack-CC2530-2.5.1a\Projects\zstack\Samp /
//                          les\GenericApp\CC2530DB\..\..\..\..\..\Components /
//                          \mac\include\" -I "D:\Learning                    /
//                          Materials\ÎïÁªÍø19-1ÎïÁªÍø×ÛºÏÏîÄ¿ÊµÑµ\SourceCode /
//                          \ZigBee\ZStack-CC2530-2.5.1a\Projects\zstack\Samp /
//                          les\GenericApp\CC2530DB\..\..\..\..\..\Components /
//                          \mac\high_level\" -I "D:\Learning                 /
//                          Materials\ÎïÁªÍø19-1ÎïÁªÍø×ÛºÏÏîÄ¿ÊµÑµ\SourceCode /
//                          \ZigBee\ZStack-CC2530-2.5.1a\Projects\zstack\Samp /
//                          les\GenericApp\CC2530DB\..\..\..\..\..\Components /
//                          \mac\low_level\srf04\" -I "D:\Learning            /
//                          Materials\ÎïÁªÍø19-1ÎïÁªÍø×ÛºÏÏîÄ¿ÊµÑµ\SourceCode /
//                          \ZigBee\ZStack-CC2530-2.5.1a\Projects\zstack\Samp /
//                          les\GenericApp\CC2530DB\..\..\..\..\..\Components /
//                          \mac\low_level\srf04\single_chip\" -I             /
//                          "D:\Learning Materials\ÎïÁªÍø19-1ÎïÁªÍø×ÛºÏÏîÄ¿Êµ /
//                          Ñµ\SourceCode\ZigBee\ZStack-CC2530-2.5.1a\Project /
//                          s\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\ /
//                          ..\Components\mt\" -I "D:\Learning                /
//                          Materials\ÎïÁªÍø19-1ÎïÁªÍø×ÛºÏÏîÄ¿ÊµÑµ\SourceCode /
//                          \ZigBee\ZStack-CC2530-2.5.1a\Projects\zstack\Samp /
//                          les\GenericApp\CC2530DB\..\..\..\..\..\Components /
//                          \osal\include\" -I "D:\Learning                   /
//                          Materials\ÎïÁªÍø19-1ÎïÁªÍø×ÛºÏÏîÄ¿ÊµÑµ\SourceCode /
//                          \ZigBee\ZStack-CC2530-2.5.1a\Projects\zstack\Samp /
//                          les\GenericApp\CC2530DB\..\..\..\..\..\Components /
//                          \services\saddr\" -I "D:\Learning                 /
//                          Materials\ÎïÁªÍø19-1ÎïÁªÍø×ÛºÏÏîÄ¿ÊµÑµ\SourceCode /
//                          \ZigBee\ZStack-CC2530-2.5.1a\Projects\zstack\Samp /
//                          les\GenericApp\CC2530DB\..\..\..\..\..\Components /
//                          \services\sdata\" -I "D:\Learning                 /
//                          Materials\ÎïÁªÍø19-1ÎïÁªÍø×ÛºÏÏîÄ¿ÊµÑµ\SourceCode /
//                          \ZigBee\ZStack-CC2530-2.5.1a\Projects\zstack\Samp /
//                          les\GenericApp\CC2530DB\..\..\..\..\..\Components /
//                          \stack\af\" -I "D:\Learning                       /
//                          Materials\ÎïÁªÍø19-1ÎïÁªÍø×ÛºÏÏîÄ¿ÊµÑµ\SourceCode /
//                          \ZigBee\ZStack-CC2530-2.5.1a\Projects\zstack\Samp /
//                          les\GenericApp\CC2530DB\..\..\..\..\..\Components /
//                          \stack\nwk\" -I "D:\Learning                      /
//                          Materials\ÎïÁªÍø19-1ÎïÁªÍø×ÛºÏÏîÄ¿ÊµÑµ\SourceCode /
//                          \ZigBee\ZStack-CC2530-2.5.1a\Projects\zstack\Samp /
//                          les\GenericApp\CC2530DB\..\..\..\..\..\Components /
//                          \stack\sapi\" -I "D:\Learning                     /
//                          Materials\ÎïÁªÍø19-1ÎïÁªÍø×ÛºÏÏîÄ¿ÊµÑµ\SourceCode /
//                          \ZigBee\ZStack-CC2530-2.5.1a\Projects\zstack\Samp /
//                          les\GenericApp\CC2530DB\..\..\..\..\..\Components /
//                          \stack\sec\" -I "D:\Learning                      /
//                          Materials\ÎïÁªÍø19-1ÎïÁªÍø×ÛºÏÏîÄ¿ÊµÑµ\SourceCode /
//                          \ZigBee\ZStack-CC2530-2.5.1a\Projects\zstack\Samp /
//                          les\GenericApp\CC2530DB\..\..\..\..\..\Components /
//                          \stack\sys\" -I "D:\Learning                      /
//                          Materials\ÎïÁªÍø19-1ÎïÁªÍø×ÛºÏÏîÄ¿ÊµÑµ\SourceCode /
//                          \ZigBee\ZStack-CC2530-2.5.1a\Projects\zstack\Samp /
//                          les\GenericApp\CC2530DB\..\..\..\..\..\Components /
//                          \stack\zdo\" -I "D:\Learning                      /
//                          Materials\ÎïÁªÍø19-1ÎïÁªÍø×ÛºÏÏîÄ¿ÊµÑµ\SourceCode /
//                          \ZigBee\ZStack-CC2530-2.5.1a\Projects\zstack\Samp /
//                          les\GenericApp\CC2530DB\..\..\..\..\..\Components /
//                          \zmac\" -I "D:\Learning                           /
//                          Materials\ÎïÁªÍø19-1ÎïÁªÍø×ÛºÏÏîÄ¿ÊµÑµ\SourceCode /
//                          \ZigBee\ZStack-CC2530-2.5.1a\Projects\zstack\Samp /
//                          les\GenericApp\CC2530DB\..\..\..\..\..\Components /
//                          \zmac\f8w\" -Ohz --require_prototypes             /
//    List file          =  D:\Learning Materials\ÎïÁªÍø19-1ÎïÁªÍø×ÛºÏÏîÄ¿ÊµÑ /
//                          µ\SourceCode\ZigBee\ZStack-CC2530-2.5.1a\Projects /
//                          \zstack\Samples\GenericApp\CC2530DB\CoordinatorEB /
//                          \List\coordinator.s51                             /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME coordinator

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_SWITCH_SPARSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??GenericApp_Init?relay
        FUNCTION ??GenericApp_Init?relay,0203H
        FUNCTION ??GenericApp_MessageMSGCB?relay,0203H
        PUBLIC ??GenericApp_ProcessEvent?relay
        FUNCTION ??GenericApp_ProcessEvent?relay,0203H
        FUNCTION ??GenericApp_SendTheMessage?relay,0203H
        FUNCTION ??rxCB1?relay,0203H
        FUNCTION ??rxCB?relay,0203H
        PUBLIC GenericApp_ClusterList
        PUBLIC GenericApp_DstAddr
        PUBLIC GenericApp_Init
        FUNCTION GenericApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 67, STACK
        FUNCTION GenericApp_MessageMSGCB,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 97, STACK
        PUBLIC GenericApp_NwkState
        PUBLIC GenericApp_ProcessEvent
        FUNCTION GenericApp_ProcessEvent,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        FUNCTION GenericApp_SendTheMessage,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 96, STACK
        PUBLIC GenericApp_SimpleDesc
        PUBLIC GenericApp_TaskID
        PUBLIC GenericApp_TransID
        PUBLIC GenericApp_epDesc
        PUBLIC RAIN
        PUBLIC RELAY1
        PUBLIC RELAY2
        FUNCTION rxCB,0603H
        ARGFRAME XSTACK, 0, STACK
        FUNCTION rxCB1,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
HalUARTOpen         SYMBOL "HalUARTOpen"
HalUARTWrite        SYMBOL "HalUARTWrite"
afRegister          SYMBOL "afRegister"
RegisterForKeys     SYMBOL "RegisterForKeys"
HalLcdWriteString   SYMBOL "HalLcdWriteString"
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
osal_msg_receive    SYMBOL "osal_msg_receive"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
ZDO_ParseEPListRsp  SYMBOL "ZDO_ParseEPListRsp"
HalLedSet           SYMBOL "HalLedSet"
osal_mem_free       SYMBOL "osal_mem_free"
HalUARTRead         SYMBOL "HalUARTRead"
AF_DataRequest      SYMBOL "AF_DataRequest"
osal_memcpy         SYMBOL "osal_memcpy"
sprintf             SYMBOL "sprintf"
osal_strlen         SYMBOL "osal_strlen"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??HalLcdWriteString?relay SYMBOL "?relay", HalLcdWriteString
??HalLedSet?relay   SYMBOL "?relay", HalLedSet
??HalUARTOpen?relay SYMBOL "?relay", HalUARTOpen
??HalUARTRead?relay SYMBOL "?relay", HalUARTRead
??HalUARTWrite?relay SYMBOL "?relay", HalUARTWrite
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
??ZDO_ParseEPListRsp?relay SYMBOL "?relay", ZDO_ParseEPListRsp
??ZDO_RegisterForZDOMsg?relay SYMBOL "?relay", ZDO_RegisterForZDOMsg
??afRegister?relay  SYMBOL "?relay", afRegister
??osal_mem_free?relay SYMBOL "?relay", osal_mem_free
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??osal_strlen?relay SYMBOL "?relay", osal_strlen
??sprintf?relay     SYMBOL "?relay", sprintf
GenericApp_Init     SYMBOL "GenericApp_Init"
??GenericApp_Init?relay SYMBOL "?relay", GenericApp_Init
GenericApp_ProcessEvent SYMBOL "GenericApp_ProcessEvent"
??GenericApp_ProcessEvent?relay SYMBOL "?relay", GenericApp_ProcessEvent

        EXTERN HalUARTOpen
        FUNCTION HalUARTOpen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 67, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 93, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 67, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 67, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteString
        FUNCTION HalLcdWriteString,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 67, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 67, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseEPListRsp
        FUNCTION ZDO_ParseEPListRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTRead
        FUNCTION HalUARTRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 96, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sprintf
        FUNCTION sprintf,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 97, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_strlen
        FUNCTION osal_strlen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 93, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??HalLcdWriteString?relay
        FUNCTION ??HalLcdWriteString?relay,00H
        EXTERN ??HalLedSet?relay
        FUNCTION ??HalLedSet?relay,00H
        EXTERN ??HalUARTOpen?relay
        FUNCTION ??HalUARTOpen?relay,00H
        EXTERN ??HalUARTRead?relay
        FUNCTION ??HalUARTRead?relay,00H
        EXTERN ??HalUARTWrite?relay
        FUNCTION ??HalUARTWrite?relay,00H
        EXTERN ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,00H
        EXTERN ??ZDO_ParseEPListRsp?relay
        FUNCTION ??ZDO_ParseEPListRsp?relay,00H
        EXTERN ??ZDO_RegisterForZDOMsg?relay
        FUNCTION ??ZDO_RegisterForZDOMsg?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??osal_mem_free?relay
        FUNCTION ??osal_mem_free?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??osal_strlen?relay
        FUNCTION ??osal_strlen?relay,00H
        EXTERN ??sprintf?relay
        FUNCTION ??sprintf?relay,00H

// D:\Learning Materials\ÎïÁªÍø19-1ÎïÁªÍø×ÛºÏÏîÄ¿ÊµÑµ\SourceCode\ZigBee\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\Source\coordinator.c
//    1 /******************************************************************************
//    2   Filename:       GenericApp.c
//    3   Revised:        $Date: 2012-03-07 01:04:58 -0800 (Wed, 07 Mar 2012) $
//    4   Revision:       $Revision: 29656 $
//    5 
//    6   Description:    Generic Application (no Profile).
//    7 
//    8 
//    9   Copyright 2004-2012 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License"). You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product. Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 ******************************************************************************/
//   39 
//   40 /*********************************************************************
//   41   This application isn't intended to do anything useful, it is
//   42   intended to be a simple example of an application's structure.
//   43 
//   44   This application sends "Hello World" to another "Generic"
//   45   application every 5 seconds.  The application will also
//   46   receives "Hello World" packets.
//   47 
//   48   The "Hello World" messages are sent/received as MSG type message.
//   49 
//   50   This applications doesn't have a profile, so it handles everything
//   51   directly - itself.
//   52 
//   53   Key control:
//   54     SW1:
//   55     SW2:  initiates end device binding
//   56     SW3:
//   57     SW4:  initiates a match description request
//   58 *********************************************************************/
//   59 
//   60 /*********************************************************************
//   61  * INCLUDES
//   62  */
//   63 #include "OSAL.h"
//   64 #include "AF.h"
//   65 #include "ZDApp.h"
//   66 #include "ZDObject.h"
//   67 #include "ZDProfile.h"
//   68 #include <stdio.h>
//   69 #include "GenericApp.h"
//   70 #include "DebugTrace.h"
//   71 
//   72 #if !defined( WIN32 )
//   73   #include "OnBoard.h"
//   74 #endif
//   75 
//   76 /* HAL */
//   77 #include "hal_lcd.h"
//   78 #include "hal_led.h"
//   79 #include "hal_key.h"
//   80 #include "hal_uart.h"
//   81 
//   82 /* RTOS */
//   83 #if defined( IAR_ARMCM3_LM )
//   84 #include "RTOS_App.h"
//   85 #endif  
//   86 
//   87 /*********************************************************************
//   88  * MACROS
//   89  */
//   90 
//   91 /*********************************************************************
//   92  * CONSTANTS
//   93  */
//   94 
//   95 /*********************************************************************
//   96  * TYPEDEFS
//   97  */
//   98 
//   99 /*********************************************************************
//  100  * GLOBAL VARIABLES
//  101  */
//  102 // This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
//  103 const cId_t GenericApp_ClusterList[GENERICAPP_MAX_CLUSTERS] =
GenericApp_ClusterList:
        DW 1
//  104 {
//  105   GENERICAPP_CLUSTERID
//  106 };
//  107 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  108 const SimpleDescriptionFormat_t GenericApp_SimpleDesc =
GenericApp_SimpleDesc:
        DB 10
        DATA16
        DW 3844
        DW 1
        DATA8
        DB 0
        DB 1
        DATA16
        DW GenericApp_ClusterList
        DATA8
        DB 1
        DATA16
        DW GenericApp_ClusterList
//  109 {
//  110   GENERICAPP_ENDPOINT,              //  int Endpoint;
//  111   GENERICAPP_PROFID,                //  uint16 AppProfId[2];
//  112   GENERICAPP_DEVICEID,              //  uint16 AppDeviceId[2];
//  113   GENERICAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
//  114   GENERICAPP_FLAGS,                 //  int   AppFlags:4;
//  115   GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
//  116   (cId_t *)GenericApp_ClusterList,  //  byte *pAppInClusterList;
//  117   GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
//  118   (cId_t *)GenericApp_ClusterList   //  byte *pAppInClusterList;
//  119 };
//  120 
//  121 // This is the Endpoint/Interface description.  It is defined here, but
//  122 // filled-in in GenericApp_Init().  Another way to go would be to fill
//  123 // in the structure here and make it a "const" (in code space).  The
//  124 // way it's defined in this sample app it is define in RAM.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  125 endPointDesc_t GenericApp_epDesc;
GenericApp_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z
//  126 
//  127 /*********************************************************************
//  128  * EXTERNAL VARIABLES
//  129  */
//  130 
//  131 /*********************************************************************
//  132  * EXTERNAL FUNCTIONS
//  133  */
//  134 
//  135 /*********************************************************************
//  136  * LOCAL VARIABLES
//  137  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  138 byte GenericApp_TaskID;   // Task ID for internal task/event processing
GenericApp_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  139                           // This variable will be received when
//  140                           // GenericApp_Init() is called.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  141 devStates_t GenericApp_NwkState;
GenericApp_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  142 
//  143 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  144 byte GenericApp_TransID;  // This is the unique message ID (counter)
GenericApp_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  145 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  146 afAddrType_t GenericApp_DstAddr;
GenericApp_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  147 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  148 byte RAIN = '0';			// ÓêÁ¿ÐÅÏ¢
RAIN:
        DATA8
        DS 1
        REQUIRE `?<Initializer for RAIN>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//  149 byte RELAY1 = '0';			// ¼ÌµçÆ÷1×´Ì¬
RELAY1:
        DATA8
        DS 1
        REQUIRE `?<Initializer for RELAY1>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//  150 byte RELAY2 = '0';			// ¼ÌµçÆ÷2×´Ì¬
RELAY2:
        DATA8
        DS 1
        REQUIRE `?<Initializer for RELAY2>`
        REQUIRE __INIT_XDATA_I
//  151 
//  152 //END_RAIN_INFO endInfo[GENERICAPP_END_MAX_NUM]; // ¶¨ÒåÖÕ¶Ë½ÚµãÐÅÏ¢½á¹¹Ìå BANILIY 0927
//  153 
//  154 /*********************************************************************
//  155  * LOCAL FUNCTIONS
//  156  */
//  157 static void GenericApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
//  158 static void GenericApp_HandleKeys( byte shift, byte keys );
//  159 static void GenericApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
//  160 static void GenericApp_SendTheMessage( void );
//  161 
//  162 static void rxCB(uint8 port,uint8 event); // ÉùÃ÷´®¿Ú»Øµ÷º¯Êý 
//  163 static void rxCB1(uint8 port,uint8 event);
//  164 
//  165 #if defined( IAR_ARMCM3_LM )
//  166 static void GenericApp_ProcessRtosMessage( void );
//  167 #endif
//  168 
//  169 /*********************************************************************
//  170  * NETWORK LAYER CALLBACKS
//  171  */
//  172 
//  173 /*********************************************************************
//  174  * PUBLIC FUNCTIONS
//  175  */
//  176 
//  177 /*********************************************************************
//  178  * @fn      GenericApp_Init
//  179  *
//  180  * @brief   Initialization function for the Generic App Task.
//  181  *          This is called during initialization and should contain
//  182  *          any application specific initialization (ie. hardware
//  183  *          initialization/setup, table initialization, power up
//  184  *          notificaiton ... ).
//  185  *
//  186  * @param   task_id - the ID assigned by OSAL.  This ID should be
//  187  *                    used to send messages and set timers.
//  188  *
//  189  * @return  none
//  190  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  191 void GenericApp_Init( uint8 task_id )
GenericApp_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function GenericApp_Init
        CODE
//  192 {
        FUNCALL GenericApp_Init, HalUARTOpen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 67, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 67, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_Init, HalUARTOpen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 67, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 67, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_Init, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 67, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 67, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 67, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 67, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 67, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 67, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_Init, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 67, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 67, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 67, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 67, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 67, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 67, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 58
        MOV     A,#-0x3a
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 67)
        MOV     A,R1
//  193   GenericApp_TaskID = task_id;
        MOV     DPTR,#GenericApp_TaskID
        MOVX    @DPTR,A
//  194   GenericApp_NwkState = DEV_INIT;
        MOV     DPTR,#GenericApp_NwkState
        MOV     A,#0x1
        MOVX    @DPTR,A
//  195   GenericApp_TransID = 0;
        MOV     DPTR,#GenericApp_TransID
        CLR     A
        MOVX    @DPTR,A
//  196   // ´®¿Ú0³õÊ¼»¯
//  197   halUARTCfg_t uartConfig;      //¶¨ÒåÒ»¸ö´®¿Ú½á¹¹Ìå
//  198   uartConfig.configured             =TRUE;//Ê¹ÄÜ ´®¿Ú½á¹¹Ìå
        MOV     A,#0x1d
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  199   uartConfig.baudRate               =HAL_UART_BR_115200;//¶¨Òå´®¿Ú²¨ÌØÂÊ
        MOV     A,#0x1e
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x4
        MOVX    @DPTR,A
//  200   uartConfig.flowControl            =FALSE;                                         
        MOV     A,#0x1f
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  201   uartConfig.callBackFunc           =rxCB; // ´®¿Ú»Øµ÷º¯Êý
        MOV     A,#0x38
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#??rxCB?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??rxCB?relay >> 8) & 0xff
        MOVX    @DPTR,A
//  202   HalUARTOpen(HAL_UART_PORT_0,&uartConfig);// ´ò¿ª´®¿Ú0
        ; Setup parameters for call to function HalUARTOpen
        MOV     A,#0x1d
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTOpen?relay
//  203   halUARTCfg_t uartConfig1;      //¶¨ÒåÒ»¸ö´®¿Ú½á¹¹Ìå
//  204   uartConfig1.configured             =TRUE;//Ê¹ÄÜ ´®¿Ú½á¹¹Ìå
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x1
        MOVX    @DPTR,A
//  205   uartConfig1.baudRate               =HAL_UART_BR_115200;//¶¨Òå´®¿Ú²¨ÌØÂÊ
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x4
        MOVX    @DPTR,A
//  206   uartConfig1.flowControl            =FALSE;                                         
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  207   uartConfig1.callBackFunc           =rxCB1; // ´®¿Ú»Øµ÷º¯Êý
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#??rxCB1?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??rxCB1?relay >> 8) & 0xff
        MOVX    @DPTR,A
//  208   HalUARTOpen(HAL_UART_PORT_1,&uartConfig1);// ´ò¿ª´®¿Ú1
        ; Setup parameters for call to function HalUARTOpen
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x1
        LCALL   ??HalUARTOpen?relay
//  209 
//  210     
//  211   uint8 *txBuffer = ">>>> ³õÊ¼»¯¡¤¡¤¡¤¡¤¡¤¡¤";
//  212   HalUARTWrite(1,txBuffer,50);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x32
        MOV     R5,#0x0
        MOV     R2,#`?<Constant ">>>> \\263\\365\\312\\274\\273\\257\\241\\` & 0xff
        MOV     R3,#(`?<Constant ">>>> \\263\\365\\312\\274\\273\\257\\241\\` >> 8) & 0xff
        MOV     R1,#0x1
        LCALL   ??HalUARTWrite?relay
//  213 
//  214   // Device hardware initialization can be added here or in main() (Zmain.c).
//  215   // If the hardware is application specific - add it here.
//  216   // If the hardware is other parts of the device add it in main().
//  217 
//  218   GenericApp_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;  //¹ã²¥
        MOV     DPTR,#GenericApp_DstAddr + 8
        MOV     A,#0xf
        MOVX    @DPTR,A
//  219   GenericApp_DstAddr.endPoint = GENERICAPP_ENDPOINT;
        INC     DPTR
        MOV     A,#0xa
        MOVX    @DPTR,A
//  220   GenericApp_DstAddr.addr.shortAddr = 0xFFFF;                 //·¢¸øËùÓÐ½Úµã
        MOV     DPTR,#GenericApp_DstAddr
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  221 
//  222   // Fill out the endpoint description.
//  223   GenericApp_epDesc.endPoint = GENERICAPP_ENDPOINT;
        MOV     DPTR,#GenericApp_epDesc
        MOV     A,#0xa
        MOVX    @DPTR,A
//  224   GenericApp_epDesc.task_id = &GenericApp_TaskID;
        INC     DPTR
        MOV     A,#GenericApp_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(GenericApp_TaskID >> 8) & 0xff
        MOVX    @DPTR,A
//  225   GenericApp_epDesc.simpleDesc
//  226             = (SimpleDescriptionFormat_t *)&GenericApp_SimpleDesc;
        INC     DPTR
        MOV     A,#GenericApp_SimpleDesc & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(GenericApp_SimpleDesc >> 8) & 0xff
        MOVX    @DPTR,A
//  227   GenericApp_epDesc.latencyReq = noLatencyReqs;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  228 
//  229   // Register the endpoint description with the AF
//  230   afRegister( &GenericApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#GenericApp_epDesc & 0xff
        MOV     R3,#(GenericApp_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//  231 
//  232   // Register for all key events - This app will handle all key events
//  233   RegisterForKeys( GenericApp_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV     DPTR,#GenericApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??RegisterForKeys?relay
//  234 
//  235   // Update the display
//  236 #if defined ( LCD_SUPPORTED )
//  237   HalLcdWriteString( "GenericApp", HAL_LCD_LINE_1 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x1
        MOV     R2,#`?<Constant "GenericApp">` & 0xff
        MOV     R3,#(`?<Constant "GenericApp">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
//  238 #endif
//  239 
//  240   ZDO_RegisterForZDOMsg( GenericApp_TaskID, End_Device_Bind_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x20
        MOV     R3,#-0x80
        MOV     DPTR,#GenericApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_RegisterForZDOMsg?relay
//  241   ZDO_RegisterForZDOMsg( GenericApp_TaskID, Match_Desc_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x6
        MOV     R3,#-0x80
        MOV     DPTR,#GenericApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_RegisterForZDOMsg?relay
//  242 
//  243 #if defined( IAR_ARMCM3_LM )
//  244   // Register this task with RTOS task initiator
//  245   RTOS_RegisterApp( task_id, GENERICAPP_RTOS_MSG_EVT );
//  246 #endif
//  247 }
        MOV     A,#0x3a
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 9)
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock0
//  248 
//  249 /*********************************************************************
//  250  * @fn      GenericApp_ProcessEvent
//  251  *
//  252  * @brief   Generic Application Task event processor.  This function
//  253  *          is called to process all events for the task.  Events
//  254  *          include timers, messages and any other user defined events.
//  255  *
//  256  * @param   task_id  - The OSAL assigned task ID.
//  257  * @param   events - events to process.  This is a bit map and can
//  258  *                   contain more than one event.
//  259  *
//  260  * @return  none
//  261  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  262 uint16 GenericApp_ProcessEvent( uint8 task_id, uint16 events )
GenericApp_ProcessEvent:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function GenericApp_ProcessEvent
        CODE
//  263 {
        FUNCALL GenericApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, ZDO_ParseEPListRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, GenericApp_MessageMSGCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, GenericApp_SendTheMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  264   afIncomingMSGPacket_t *MSGpkt;
//  265   afDataConfirm_t *afDataConfirm;
//  266 
//  267   // Data Confirmation message fields
//  268   byte sentEP;
//  269   ZStatus_t sentStatus;
//  270   byte sentTransID;       // This should match the value sent
//  271   (void)task_id;  // Intentionally unreferenced parameter
//  272 
//  273   if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JNZ     $+5
        LJMP    ??GenericApp_ProcessEvent_0 & 0xFFFF
//  274   {
//  275     MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??GenericApp_ProcessEvent_1
//  276     while ( MSGpkt )
//  277     {
//  278       switch ( MSGpkt->hdr.event )
//  279       {
//  280         case ZDO_CB_MSG:
//  281           GenericApp_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
//  282           break;
//  283 
//  284         case KEY_CHANGE:
//  285           GenericApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  286           break;
//  287 
//  288         case AF_DATA_CONFIRM_CMD:
//  289           // This message is received as a confirmation of a data packet sent.
//  290           // The status is of ZStatus_t type [defined in ZComDef.h]
//  291           // The message fields are defined in AF.h
//  292           afDataConfirm = (afDataConfirm_t *)MSGpkt;
//  293           sentEP = afDataConfirm->endpoint;
//  294           sentStatus = afDataConfirm->hdr.status;
//  295           sentTransID = afDataConfirm->transID;
//  296           (void)sentEP;
//  297           (void)sentTransID;
//  298 
//  299           // Action taken when confirmation is received.
//  300           if ( sentStatus != ZSuccess )
//  301           {
//  302             // The data wasn't delivered -- Do something
//  303           }
//  304           break;
//  305 
//  306         case AF_INCOMING_MSG_CMD:
//  307           GenericApp_MessageMSGCB( MSGpkt );
//  308           break;
//  309 
//  310         case ZDO_STATE_CHANGE:
//  311           GenericApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
??GenericApp_ProcessEvent_2:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#GenericApp_NwkState
        MOVX    @DPTR,A
//  312           if ( (GenericApp_NwkState == DEV_ZB_COORD)
//  313               || (GenericApp_NwkState == DEV_ROUTER)
//  314               || (GenericApp_NwkState == DEV_END_DEVICE) )
        XRL     A,#0x9
        JZ      ??GenericApp_ProcessEvent_3
        MOVX    A,@DPTR
        XRL     A,#0x7
        JZ      ??GenericApp_ProcessEvent_3
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??GenericApp_ProcessEvent_4
//  315           {
//  316             // Start sending "the" message in a regular interval.
//  317             osal_start_timerEx( GenericApp_TaskID,
//  318                                 GENERICAPP_SEND_MSG_EVT,
//  319                                 GENERICAPP_SEND_MSG_TIMEOUT );
??GenericApp_ProcessEvent_3:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0xc
        MOV     R5,#0x1
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#GenericApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  320           }
//  321           break;
//  322 
//  323         default:
//  324           break;
//  325       }
//  326 
//  327       // Release the memory
//  328       osal_msg_deallocate( (uint8 *)MSGpkt );
??GenericApp_ProcessEvent_4:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_msg_deallocate?relay
//  329 
//  330       // Next
//  331       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
??GenericApp_ProcessEvent_1:
        MOV     DPTR,#GenericApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JNZ     $+5
        LJMP    ??GenericApp_ProcessEvent_5 & 0xFFFF
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JNZ     $+5
        LJMP    ??GenericApp_ProcessEvent_6 & 0xFFFF
        ADD     A,#0x49
        JZ      ??GenericApp_ProcessEvent_2
        ADD     A,#-0x2
        JNZ     ??GenericApp_ProcessEvent_4
        MOV     A,?V0 + 0
        ADD     A,#0xc
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 2
        LCALL   ?US_SWITCH_SPARSE
`?<Jumptable for GenericApp_ProcessEvent>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        2
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32774
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??GenericApp_ProcessEvent_7
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32800
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??GenericApp_ProcessEvent_8
        DATA
        DATA16
        DATA
        DATA16
        DW        ??GenericApp_ProcessEvent_4
        CODE
??GenericApp_ProcessEvent_7:
        ; Setup parameters for call to function ZDO_ParseEPListRsp
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??ZDO_ParseEPListRsp?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,R2
        ORL     A,?V0 + 3
        JZ      ??GenericApp_ProcessEvent_4
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        JNZ     ??GenericApp_ProcessEvent_9
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??GenericApp_ProcessEvent_9
        MOV     DPTR,#GenericApp_DstAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#GenericApp_DstAddr
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#GenericApp_DstAddr + 9
        MOVX    @DPTR,A
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x8
        LCALL   ??HalLedSet?relay
??GenericApp_ProcessEvent_9:
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??osal_mem_free?relay
        LJMP    ??GenericApp_ProcessEvent_4 & 0xFFFF
??GenericApp_ProcessEvent_8:
        MOV     A,?V0 + 0
        ADD     A,#0x13
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        JNZ     ??GenericApp_ProcessEvent_10
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
??GenericApp_ProcessEvent_11:
        MOV     R1,#0x8
        LCALL   ??HalLedSet?relay
        LJMP    ??GenericApp_ProcessEvent_4 & 0xFFFF
??GenericApp_ProcessEvent_10:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x4
        SJMP    ??GenericApp_ProcessEvent_11
??GenericApp_ProcessEvent_6:
        ; Setup parameters for call to function GenericApp_MessageMSGCB
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??GenericApp_MessageMSGCB?relay
        LJMP    ??GenericApp_ProcessEvent_4 & 0xFFFF
//  332     }
//  333 
//  334     // return unprocessed events
//  335     return (events ^ SYS_EVENT_MSG);
??GenericApp_ProcessEvent_5:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
??GenericApp_ProcessEvent_12:
        MOV     R3,A
        SJMP    ??GenericApp_ProcessEvent_13
//  336   }
//  337 
//  338   // Send a message out - This event is generated by a timer
//  339   //  (setup in GenericApp_Init()).
//  340   if ( events & GENERICAPP_SEND_MSG_EVT )
??GenericApp_ProcessEvent_0:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??GenericApp_ProcessEvent_14
//  341   {
//  342     // Send "the" message
//  343     GenericApp_SendTheMessage();
        ; Setup parameters for call to function GenericApp_SendTheMessage
        LCALL   ??GenericApp_SendTheMessage?relay
//  344 
//  345     // Setup to send message again
//  346     osal_start_timerEx( GenericApp_TaskID,
//  347                         GENERICAPP_SEND_MSG_EVT,
//  348                         GENERICAPP_SEND_MSG_TIMEOUT );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0xc
        MOV     R5,#0x1
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#GenericApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  349 
//  350     // return unprocessed events
//  351     return (events ^ GENERICAPP_SEND_MSG_EVT);
        MOV     A,R6
        XRL     A,#0x1
        MOV     R2,A
        MOV     A,R7
        SJMP    ??GenericApp_ProcessEvent_12
//  352   }
//  353 
//  354   
//  355 #if defined( IAR_ARMCM3_LM )
//  356   // Receive a message from the RTOS queue
//  357   if ( events & GENERICAPP_RTOS_MSG_EVT )
//  358   {
//  359     // Process message from RTOS queue
//  360     GenericApp_ProcessRtosMessage();
//  361 
//  362     // return unprocessed events
//  363     return (events ^ GENERICAPP_RTOS_MSG_EVT);
//  364   }
//  365 #endif
//  366 
//  367   // Discard unknown events
//  368   return 0;
??GenericApp_ProcessEvent_14:
        MOV     R2,#0x0
        MOV     R3,#0x0
??GenericApp_ProcessEvent_13:
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  369 }
//  370 
//  371 /****************************************************************************************  BANILIY-0919
//  372  * ½ÓÊÕ´®¿ÚÊý¾Ý
//  373  * ¸Ã»Øµ÷º¯ÊýÍê³É£¬´Ó´®¿Ú0¶ÁÈ¡2¸ö×Ö·û£¬·Å½øuartbuf
//  374  * Ã¿µ±Ð­µ÷Æ÷´Ó´®¿ÚÊÕµ½Êý¾ÝÊ±£¬¾Í»á×Ô¶¯µ÷ÓÃÕâ¸öº¯Êý
//  375  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  376 static void rxCB(uint8 port,uint8 event)
rxCB:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function rxCB
        CODE
//  377 {
        ; Saved register size: 0
        ; Auto size: 0
//  378   /*
//  379   uint8 uartbuf[2];
//  380   HalUARTRead(0,uartbuf,2);         //´Ó´®¿Ú¶ÁÈ¡Á½¸ö×Ö½ÚµÄÊý¾Ýµ½uartbufÖÐ
//  381   AF_DataRequest( &GenericApp_DstAddr, &GenericApp_epDesc,
//  382                        GENERICAPP_CLUSTERID,
//  383                        2,           //·¢ËÍÁ½¸ö×Ö½ÚµÄÊý¾Ý
//  384                        uartbuf,     //·¢ËÍµÄÊý¾ÝÄÚÈÝ£¬ÆäÊµ¾ÍÊÇ´Ó´®¿ÚÊÕµ½µÄ2¸ö×Ö½ÚµÄÊý¾Ý
//  385                        &GenericApp_TransID,
//  386                        AF_DISCV_ROUTE, AF_DEFAULT_RADIUS );*/
//  387 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock2
//  388 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  389 static void rxCB1(uint8 port,uint8 event)
rxCB1:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function rxCB1
        CODE
//  390 {
        FUNCALL rxCB1, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxCB1, HalUARTRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxCB1, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxCB1, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
//  391   HalLedSet(HAL_LED_1,HAL_LED_MODE_ON);   //µãÁÁled2
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x1
        LCALL   ??HalLedSet?relay
//  392   uint8 uartbuf[2];
//  393   HalUARTRead(1,uartbuf,2);         //´Ó´®¿Ú¶ÁÈ¡Á½¸ö×Ö½ÚµÄÊý¾Ýµ½uartbufÖÐ
        ; Setup parameters for call to function HalUARTRead
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x1
        LCALL   ??HalUARTRead?relay
//  394   AF_DataRequest( &GenericApp_DstAddr, &GenericApp_epDesc,
//  395                        GENERICAPP_CLUSTERID,
//  396                        2,           //·¢ËÍÁ½¸ö×Ö½ÚµÄÊý¾Ý
//  397                        uartbuf,     //·¢ËÍµÄÊý¾ÝÄÚÈÝ£¬ÆäÊµ¾ÍÊÇ´Ó´®¿ÚÊÕµ½µÄ2¸ö×Ö½ÚµÄÊý¾Ý
//  398                        &GenericApp_TransID,
//  399                        AF_DISCV_ROUTE, AF_DEFAULT_RADIUS );
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0 + 0,#GenericApp_TransID & 0xff
        MOV     ?V0 + 1,#(GenericApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     ?V0 + 0,#0x2
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     R1,#0x20
        MOV     R4,#GenericApp_epDesc & 0xff
        MOV     R5,#(GenericApp_epDesc >> 8) & 0xff
        MOV     R2,#GenericApp_DstAddr & 0xff
        MOV     R3,#(GenericApp_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
//  400   HalLedSet(HAL_LED_1,HAL_LED_MODE_OFF);  //Ï¨Ãðled1
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x1
        LCALL   ??HalLedSet?relay
//  401 }
        MOV     A,#0x2
        CFI EndBlock cfiBlock3
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Valid
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock4
//  402 
//  403 /*********************************************************************
//  404  * Event Generation Functions
//  405  */
//  406 
//  407 /*********************************************************************
//  408  * @fn      GenericApp_ProcessZDOMsgs()
//  409  *
//  410  * @brief   Process response messages
//  411  *
//  412  * @param   none
//  413  *
//  414  * @return  none
//  415  */
//  416 static void GenericApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
//  417 {
//  418   switch ( inMsg->clusterID )
//  419   {
//  420     case End_Device_Bind_rsp:
//  421       if ( ZDO_ParseBindRsp( inMsg ) == ZSuccess )
//  422       {
//  423         // Light LED
//  424         HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
//  425       }
//  426 #if defined( BLINK_LEDS )
//  427       else
//  428       {
//  429         // Flash LED to show failure
//  430         HalLedSet ( HAL_LED_4, HAL_LED_MODE_FLASH );
//  431       }
//  432 #endif
//  433       break;
//  434 
//  435     case Match_Desc_rsp:
//  436       {
//  437         ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
//  438         if ( pRsp )
//  439         {
//  440           if ( pRsp->status == ZSuccess && pRsp->cnt )
//  441           {
//  442             GenericApp_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
//  443             GenericApp_DstAddr.addr.shortAddr = pRsp->nwkAddr;
//  444             // Take the first endpoint, Can be changed to search through endpoints
//  445             GenericApp_DstAddr.endPoint = pRsp->epList[0];
//  446 
//  447             // Light LED
//  448             HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
//  449           }
//  450           osal_mem_free( pRsp );
//  451         }
//  452       }
//  453       break;
//  454   }
//  455 }
//  456 
//  457 /*********************************************************************
//  458  * @fn      GenericApp_HandleKeys
//  459  *
//  460  * @brief   Handles all key events for this device.
//  461  *
//  462  * @param   shift - true if in shift/alt.
//  463  * @param   keys - bit field for key events. Valid entries:
//  464  *                 HAL_KEY_SW_4
//  465  *                 HAL_KEY_SW_3
//  466  *                 HAL_KEY_SW_2
//  467  *                 HAL_KEY_SW_1
//  468  *
//  469  * @return  none
//  470  */
//  471 static void GenericApp_HandleKeys( uint8 shift, uint8 keys )
//  472 {
//  473    /**************************************************************************************  BANILIY-0926*/
//  474   // S1 °´¼ü´¦Àí
//  475   if ( keys & HAL_KEY_SW_6 )
//  476     {
//  477       
//  478     }
//  479 }
//  480 
//  481 /*********************************************************************
//  482  * LOCAL FUNCTIONS
//  483  */
//  484 
//  485 /*********************************************************************
//  486  * @fn      GenericApp_MessageMSGCB
//  487  *
//  488  * @brief   Data message processor callback.  This function processes
//  489  *          any incoming data - probably from other devices.  So, based
//  490  *          on cluster ID, perform the intended action.
//  491  *
//  492  * @param   none
//  493  *
//  494  * @return  none
//  495  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  496 static void GenericApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
GenericApp_MessageMSGCB:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function GenericApp_MessageMSGCB
        CODE
//  497 {
        FUNCALL GenericApp_MessageMSGCB, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 96, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 96, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_MessageMSGCB, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 97, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 97, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_MessageMSGCB, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 97, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 97, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_MessageMSGCB, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 97, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 97, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_MessageMSGCB, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 93, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 93, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 93, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 93, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 93, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 93, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 82
        MOV     A,#-0x52
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 93)
//  498   uint8 buffer[2];
//  499   char sendStr[80]={0};
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {0}>` >> 8) & 0xff
        MOV     DPL,#`?<Constant {0}>` & 0xff
        MOV     A,#0x50
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  500 
//  501   switch ( pkt->clusterId )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??GenericApp_MessageMSGCB_0
        INC     DPTR
        MOVX    A,@DPTR
??GenericApp_MessageMSGCB_0:
        JZ      $+5
        LJMP    ??GenericApp_MessageMSGCB_1 & 0xFFFF
//  502   {
//  503     case GENERICAPP_CLUSTERID:
//  504       // "the" message
//  505       osal_memcpy(buffer,pkt->cmd.Data,2);
        ; Setup parameters for call to function osal_memcpy
        MOV     A,R2
        ADD     A,#0x22
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 96)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 93)
//  506       if(buffer[0] == '1')   //ÖÕ¶Ë1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,#0x31
        JNZ     ??GenericApp_MessageMSGCB_2
//  507       {
//  508         RAIN = buffer[1];
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     DPTR,#RAIN
        LCALL   ?Subroutine2 & 0xFFFF
//  509         sprintf(sendStr, "{\"No\":%c,\"RAIN\":%c}", buffer[0],buffer[1]);
//  510       }
??CrossCallReturnLabel_2:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 95)
        MOV     ?V0 + 0,#0x31
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 97)
        MOV     R4,#`?<Constant "{\\"No\\":%c,\\"RAIN\\":%c}">` & 0xff
        MOV     R5,#(`?<Constant "{\\"No\\":%c,\\"RAIN\\":%c}">` >> 8) & 0xff
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??sprintf?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 93)
//  511       if(buffer[0] == '2')   //ÖÕ¶Ë2
??GenericApp_MessageMSGCB_2:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,#0x32
        JNZ     ??GenericApp_MessageMSGCB_3
//  512       {
//  513         RELAY1 = buffer[1];
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     DPTR,#RELAY1
        LCALL   ?Subroutine2 & 0xFFFF
//  514         sprintf(sendStr, "{\"No\":%c,\"RELAY1\":%c}", buffer[0],buffer[1]);
//  515       }
??CrossCallReturnLabel_3:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 95)
        MOV     ?V0 + 0,#0x32
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 97)
        MOV     R4,#`?<Constant "{\\"No\\":%c,\\"RELAY1\\":%c}">` & 0xff
        MOV     R5,#(`?<Constant "{\\"No\\":%c,\\"RELAY1\\":%c}">` >> 8) & 0xff
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??sprintf?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 93)
//  516       if(buffer[0] == '3')   //ÖÕ¶Ë3
??GenericApp_MessageMSGCB_3:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,#0x33
        JNZ     ??GenericApp_MessageMSGCB_4
//  517       {
//  518         RELAY2 = buffer[1];
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     DPTR,#RELAY2
        LCALL   ?Subroutine2 & 0xFFFF
//  519         sprintf(sendStr, "{\"No\":%c,\"RELAY2\":%c}", buffer[0],buffer[1]);
//  520       }
??CrossCallReturnLabel_4:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 95)
        MOV     ?V0 + 0,#0x33
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 97)
        MOV     R4,#`?<Constant "{\\"No\\":%c,\\"RELAY2\\":%c}">` & 0xff
        MOV     R5,#(`?<Constant "{\\"No\\":%c,\\"RELAY2\\":%c}">` >> 8) & 0xff
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??sprintf?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 93)
//  521       HalUARTWrite(0, sendStr, osal_strlen( sendStr )); //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
??GenericApp_MessageMSGCB_4:
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function osal_strlen
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_strlen?relay
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ?Subroutine1 & 0xFFFF
//  522       HalUARTWrite(0, "\n\r", 2);  
??CrossCallReturnLabel_0:
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  523       break;
//  524       
//  525   }
//  526     
//  527 }
??GenericApp_MessageMSGCB_1:
        MOV     A,#0x52
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock5

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond6 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 93)
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond7) CFA_SP SP+0
        CFI (cfiCond7) CFA_XSP16 add(XSP16, 93)
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond8) CFA_SP SP+0
        CFI (cfiCond8) CFA_XSP16 add(XSP16, 93)
        CFI Block cfiPicker9 Using cfiCommon1
        CFI (cfiPicker9) NoFunction
        CFI (cfiPicker9) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function sprintf
        ; Setup parameters for call to function sprintf
        ; Setup parameters for call to function sprintf
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiPicker9
//  528 
//  529 /*********************************************************************
//  530  * @fn      GenericApp_SendTheMessage
//  531  *
//  532  * @brief   Send "the" message.
//  533  *
//  534  * @param   none
//  535  *
//  536  * @return  none
//  537  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  538 static void GenericApp_SendTheMessage( void )
GenericApp_SendTheMessage:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI Function GenericApp_SendTheMessage
        CODE
//  539 {
        FUNCALL GenericApp_SendTheMessage, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 96, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 96, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_SendTheMessage, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 90, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 90, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_SendTheMessage, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 90, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 90, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_SendTheMessage, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 90, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 90, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 80
        MOV     A,#-0x50
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 90)
//  540 
//  541   char sendStr[80]={0};
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {0}>_1` >> 8) & 0xff
        MOV     DPL,#`?<Constant {0}>_1` & 0xff
        MOV     A,#0x50
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  542   sprintf(sendStr, "{\"RAIN\":%c,\"RELAY1\":%c,\"RELAY2\":%c}", RAIN,RELAY1,RELAY2);
        ; Setup parameters for call to function sprintf
        MOV     DPTR,#RELAY2
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 92)
        MOV     DPTR,#RELAY1
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 94)
        MOV     DPTR,#RAIN
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 96)
        MOV     R4,#`?<Constant "{\\"RAIN\\":%c,\\"RELAY1\\":%...">` & 0xff
        MOV     R5,#(`?<Constant "{\\"RAIN\\":%c,\\"RELAY1\\":%...">` >> 8) & 0xff
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??sprintf?relay
        MOV     A,#0x6
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 90)
//  543   //sprintf(sendStr, "%c%c%c", RAIN,RELAY1,RELAY2);
//  544   //HalUARTWrite(0, sendStr, osal_strlen( sendStr )); //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
//  545   //HalUARTWrite(0, "\n\r", 2);        
//  546   HalUARTWrite(1, sendStr, osal_strlen( sendStr )); 
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function osal_strlen
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_strlen?relay
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x1
        LCALL   ?Subroutine1 & 0xFFFF
//  547   HalUARTWrite(1, "\n\r", 2);
??CrossCallReturnLabel_1:
        MOV     R1,#0x1
        LCALL   ??HalUARTWrite?relay
//  548 }
        MOV     A,#0x50
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock10

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond11 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 93)
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond12) CFA_SP SP+0
        CFI (cfiCond12) CFA_XSP16 add(XSP16, 90)
        CFI Block cfiPicker13 Using cfiCommon1
        CFI (cfiPicker13) NoFunction
        CFI (cfiPicker13) Picker
        LCALL   ??HalUARTWrite?relay
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "\\n\\r">` & 0xff
        MOV     R3,#(`?<Constant "\\n\\r">` >> 8) & 0xff
        RET
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiPicker13

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for RAIN>`:
        DATA8
        DB 48

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for RELAY1>`:
        DATA8
        DB 48

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for RELAY2>`:
        DATA8
        DB 48

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GenericApp_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GenericApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GenericApp_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GenericApp_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rxCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    rxCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rxCB1?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    rxCB1

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GenericApp_MessageMSGCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GenericApp_MessageMSGCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GenericApp_SendTheMessage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GenericApp_SendTheMessage

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant ">>>> \\263\\365\\312\\274\\273\\257\\241\\`:
        DB ">>>> \263\365\312\274\273\257\241\244\241\244\241\244\241\244\241\244\241\244"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "GenericApp">`:
        DB "GenericApp"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0}>`:
        DB 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "{\\"No\\":%c,\\"RAIN\\":%c}">`:
        DB "{\"No\":%c,\"RAIN\":%c}"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "{\\"No\\":%c,\\"RELAY1\\":%c}">`:
        DB "{\"No\":%c,\"RELAY1\":%c}"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "{\\"No\\":%c,\\"RELAY2\\":%c}">`:
        DB "{\"No\":%c,\"RELAY2\":%c}"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\n\\r">`:
        DB "\012\015"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0}>_1`:
        DB 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "{\\"RAIN\\":%c,\\"RELAY1\\":%...">`:
        DB "{\"RAIN\":%c,\"RELAY1\":%c,\"RELAY2\":%c}"

        END
//  549 
//  550 #if defined( IAR_ARMCM3_LM )
//  551 /*********************************************************************
//  552  * @fn      GenericApp_ProcessRtosMessage
//  553  *
//  554  * @brief   Receive message from RTOS queue, send response back.
//  555  *
//  556  * @param   none
//  557  *
//  558  * @return  none
//  559  */
//  560 static void GenericApp_ProcessRtosMessage( void )
//  561 {
//  562   osalQueue_t inMsg;
//  563 
//  564   if ( osal_queue_receive( OsalQueue, &inMsg, 0 ) == pdPASS )
//  565   {
//  566     uint8 cmndId = inMsg.cmnd;
//  567     uint32 counter = osal_build_uint32( inMsg.cbuf, 4 );
//  568 
//  569     switch ( cmndId )
//  570     {
//  571       case CMD_INCR:
//  572         counter += 1;  /* Increment the incoming counter */
//  573                        /* Intentionally fall through next case */
//  574 
//  575       case CMD_ECHO:
//  576       {
//  577         userQueue_t outMsg;
//  578 
//  579         outMsg.resp = RSP_CODE | cmndId;  /* Response ID */
//  580         osal_buffer_uint32( outMsg.rbuf, counter );    /* Increment counter */
//  581         osal_queue_send( UserQueue1, &outMsg, 0 );  /* Send back to UserTask */
//  582         break;
//  583       }
//  584       
//  585       default:
//  586         break;  /* Ignore unknown command */    
//  587     }
//  588   }
//  589 }
//  590 #endif
//  591 
//  592 /*********************************************************************
//  593  */
// 
// 1 147 bytes in segment BANKED_CODE
//    36 bytes in segment BANK_RELAYS
//     3 bytes in segment XDATA_I
//     3 bytes in segment XDATA_ID
//   312 bytes in segment XDATA_ROM_C
//    21 bytes in segment XDATA_Z
// 
// 1 186 bytes of CODE  memory
//   312 bytes of CONST memory
//    24 bytes of XDATA memory
//
//Errors: none
//Warnings: 2
